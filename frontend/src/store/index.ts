import { makeAutoObservable, action } from "mobx";
import { io, Socket } from "socket.io-client";
import Message, { From, Chat } from "../types/ChatMessages";

class ChatStore {
  messages: Message[] = [
    { text: "lorem100a wdihoawdawd", sender: From.User },
    {
      text: `
  # –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Markdown!

  ## –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

  - **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**: \`**—Ç–µ–∫—Å—Ç**\`
  - *–ö—É—Ä—Å–∏–≤*: \`*—Ç–µ–∫—Å—Ç*\`
  - ~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~: \`~~—Ç–µ–∫—Å—Ç~~\`

  ## –°–ø–∏—Å–∫–∏

  # –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  ## –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  ### –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  #### –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  ##### –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  ###### –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫

  ### –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  1. –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
  2. –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
  3. –¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç

  ### –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  - –ü—É–Ω–∫—Ç 1
  - –ü—É–Ω–∫—Ç 2
    - –í–ª–æ–∂–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
    - –ï—â–µ –æ–¥–∏–Ω –≤–ª–æ–∂–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç

  ## –ö–æ–¥

  ### –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥
  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`console.log('Hello, world!');\`.

  ### –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥
  \`\`\`javascript
  function greet(name) {
    return \`–ü—Ä–∏–≤–µ—Ç, \${name}!\`;
  }

  console.log(greet('–ò–≥–æ—Ä—å'));
  \`\`\`

  ## –°—Å—ã–ª–∫–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

  - –°—Å—ã–ª–∫–∞: [–ü–æ—Å–µ—Ç–∏—Ç–µ Google](https://google.com)
  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:

    ![–õ–æ–≥–æ—Ç–∏–ø React](https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg)

  ## –¢–∞–±–ª–∏—Ü—ã

  | –ò–º—è       | –í–æ–∑—Ä–∞—Å—Ç | –ì–æ—Ä–æ–¥       |
  |-----------|---------|-------------|
  | –ò–≤–∞–Ω      | 25      | –ú–æ—Å–∫–≤–∞      |
  | –û–ª—å–≥–∞     | 22      | –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ |
  | –ê–ª–µ–∫—Å–∞–Ω–¥—Ä | 30      | –ö–∞–∑–∞–Ω—å      |

  ## –¶–∏—Ç–∞—Ç—ã

  > –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã.

  > **–¶–∏—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –≤–ª–æ–∂–∏—Ç—å:**
  > > –í–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞.

  ## –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

  ---

  –í–æ—Ç –∏ –≤—Å—ë! üòä
  `,
      sender: From.Bot,
    },
  ];
  chatID: string = localStorage.getItem("chat_id") || "";
  chatList: Chat[] = [];
  constructor() {
    makeAutoObservable(this, {
      setMessages: action,
      setChatID: action,
    });
  }
  setChatList(newChatList: Chat[]) {
    this.chatList = newChatList;
  }
  setChatID(id: string) {
    this.chatID = id;
  }
  setOneMessage(new_message: Message) {
    console.log(new_message);
    this.messages = [new_message];
  }
  setMessages(new_messages: Message[]) {
    console.log(new_messages);
    this.messages = new_messages;
  }
}

class AuthStore {
  isAuth: boolean = false;
  constructor() {
    makeAutoObservable(this);
  }
  setAuth(state: boolean = false) {
    this.isAuth = state;
  }
}

class SocketConnect {
  socket: Socket = io(process.env.REACT_APP_SERVER_URL, {
    transports: ["websocket"],
    reconnectionAttempts: 5,
    reconnectionDelay: 1000,
  });
  message: string = localStorage.getItem("message") || "";
  constructor() {
    makeAutoObservable(this);
  }
  connect() {
    if (!this.socket) {
      console.log("‚úÖ Socket –ø–æ–¥–∫–ª—é—á—ë–Ω", this.socket);
    }
  }
  typing(user_message: string) {
    localStorage.setItem("message", user_message || "");
    this.message = user_message;
  }
  clearInput() {
    localStorage.removeItem("message");
    this.message = "";
  }
  sendMessage() {
    this.socket.emit("message", this.message);
  }
  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      console.log("‚ùå Socket –æ—Ç–∫–ª—é—á—ë–Ω");
    }
  }
}
const socketStore = new SocketConnect();
const chatStore = new ChatStore();
const authStore = new AuthStore();

export { chatStore, authStore, socketStore };
