name: Продакшен

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Важно для корректного сравнения коммитов

      - name: Определение изменённых частей
        id: changes
        run: |
          BACKEND_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -q '^backend/' && echo 'true' || echo 'false')
          FRONTEND_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -q '^app/' && echo 'true' || echo 'false')
          echo "BACKEND_CHANGED=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "FRONTEND_CHANGED=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "BACKEND_CHANGED=$BACKEND_CHANGED" >> $GITHUB_ENV
          echo "FRONTEND_CHANGED=$FRONTEND_CHANGED" >> $GITHUB_ENV

      - name: Настройка SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Установка Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Деплой
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -ex
          cd /huntai
          git pull
          
          # Получаем изменения из GitHub Actions
          BACKEND_CHANGED=$1
          FRONTEND_CHANGED=$2
          
          echo "BACKEND_CHANGED: ${BACKEND_CHANGED}"
          echo "FRONTEND_CHANGED: ${FRONTEND_CHANGED}"
          
          echo "${{ secrets.BACKEND_ENV }}" > backend/.env
          echo "${{ secrets.FRONTEND_ENV }}" > app/.env
      
          docker network inspect backend-network >/dev/null 2>&1 || docker network create backend-network
      
          # Билд бэка если были изменения
          if [ "${BACKEND_CHANGED}" = "true" ]; then
            echo "Rebuilding backend..."
            docker compose -f docker-compose.prod.yml build backend
            docker compose -f docker-compose.prod.yml stop backend || true
            docker compose -f docker-compose.prod.yml rm -f backend || true
            docker compose -f docker-compose.prod.yml up -d backend
          else
            echo "No backend changes detected, skipping rebuild"
          fi

          # Всегда пересобираем фронт (как в вашем оригинальном workflow)
          echo "Rebuilding frontend..."
          docker compose -f docker-compose.prod.yml build frontend
          docker compose -f docker-compose.prod.yml stop frontend || true
          docker compose -f docker-compose.prod.yml rm -f frontend || true
          docker compose -f docker-compose.prod.yml up -d frontend
          
          docker image prune -f
      
          docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          docker logs backend --tail 20
          docker logs mongo --tail 20
          EOF
        env:
          BACKEND_CHANGED: ${{ steps.changes.outputs.BACKEND_CHANGED }}
          FRONTEND_CHANGED: ${{ steps.changes.outputs.FRONTEND_CHANGED }}