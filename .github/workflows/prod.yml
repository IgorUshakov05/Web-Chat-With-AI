name: Продакшен

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      BACKEND_PATH: backend
      FRONTEND_PATH: app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Определение изменённых частей
        id: changes
        run: |
          echo "CHANGED_BACKEND=$(git diff --name-only HEAD^ HEAD | grep -q '^${{ env.BACKEND_PATH }}/' && echo 'true' || echo 'false')" >> $GITHUB_ENV
          echo "CHANGED_FRONTEND=$(git diff --name-only HEAD^ HEAD | grep -q '^${{ env.FRONTEND_PATH }}/' && echo 'true' || echo 'false')" >> $GITHUB_ENV

      - name: Пропуск деплоя при отсутствии изменений
        if: env.CHANGED_BACKEND == 'false' && env.CHANGED_FRONTEND == 'false'
        run: echo "Нет изменений в backend или frontend. Пропуск деплоя." && exit 0

      - name: Настройка SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Установка Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Деплой на сервер
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -ex

          cd /huntai

          # Запись .env-файлов с использованием heredoc (на случай \n и спецсимволов)
          cat <<EOB > ./backend/.env
          ${{ secrets.BACKEND_ENV }}
          EOB

          cat <<EOF > ./app/.env
          ${{ secrets.FRONTEND_ENV }}
          EOF

          # Проверка docker-compose.prod.yml
          if [ ! -f docker-compose.prod.yml ]; then
            echo "ERROR: docker-compose.prod.yml not found!"
            ls -la
            exit 1
          fi

          # Создание docker-сети, если не существует
          docker network inspect backend-network >/dev/null 2>&1 || docker network create backend-network

          # Полный перезапуск с пересборкой
          docker compose -f docker-compose.prod.yml down --remove-orphans || true
          docker compose -f docker-compose.prod.yml up -d --build

          echo "Контейнеры:"
          docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

          echo "Последние логи backend:"
          docker logs backend --tail 20

          echo "Последние логи MongoDB:"
          docker logs mongo --tail 20
          EOF
